Here's a step-by-step guide to help you move forward:

Create Components: Start by creating components for different parts of your website. For example:

Header: The header component will contain the logo, navigation links, and user authentication options (login, register, etc.).
Home: The home component will be the landing page of your website, showcasing your hotel offerings, featured rooms, etc.
RoomListing: This component will display a list of available rooms with their details.
RoomDetails: When a user clicks on a specific room, this component will show detailed information about the room.
BookingForm: The component will allow users to fill in their details and make a booking for a room.
Receipt: After a successful booking, this component will display the receipt with booking details.
Style Components: Use your chosen yellow color scheme and other design elements to style your components. You can use CSS modules, styled-components, or any other styling approach that suits your preferences.

Integrate with Backend APIs: For each component that requires data from the backend (e.g., room details, user information, bookings), make HTTP requests to your backend APIs using libraries like fetch or axios.

Routing: Set up React Router to handle navigation between different pages and components. Define routes for each page, such as the home page, room listing page, room details page, and booking page.

User Authentication: Implement user authentication using your backend's authentication system. Allow users to register, log in, and log out. Use tokens or session management to authenticate users and control access to certain pages.

Payment Integration (Optional): If you're planning to implement payment functionality, integrate with the payment gateway (e.g., Razorpay) on the frontend. Create a payment form and handle payment processing.

Testing: Regularly test your frontend components to ensure they function correctly and display the expected data. Test different user scenarios, such as booking a room, viewing receipts, and navigating the site.

Deployment: Once you're satisfied with your frontend development, deploy your React application to a web server or hosting platform to make it accessible to the public.